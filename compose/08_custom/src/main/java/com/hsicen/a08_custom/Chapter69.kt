package com.hsicen.a08_customimport android.annotation.SuppressLintimport android.view.ViewGroupimport android.widget.LinearLayoutimport android.widget.TextViewimport androidx.activity.ComponentActivityimport androidx.compose.foundation.backgroundimport androidx.compose.material.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.platform.ComposeViewimport androidx.compose.ui.unit.spimport com.hsicen.extension.extensions.dp2pximport com.hsicen.extension.widget.matchParentimport android.graphics.Color as AndroidColor/******====== 69.与传统View的混用 ======******//** * 为什么需要混⽤： *  1.从 View 迁移到 Compose 期间，会需要暂时地在 View ⾥写 Compose 和在 Compose ⾥写View *  2.Compose 没实现的 View（SurfaceView和TextureView）需要嵌⼊到 Compose ⾥使⽤ * * 在 View ⾥使⽤ Compose: *  1.ComposeView.setContent() *  2.⽤ Java / Kotlin 代码或者⽤ XML 布局⽂件来提供 * * 在 Compose ⾥使⽤ View: *  1.AndroidView() —— 是 Composable 函数，不是 View *  2.需要依赖 Compose 变量⾃动更新的，写进最后⼀个参数（函数类型）⾥⾯，可以跟随重组过程⾃动重新执⾏，实现刷新。 */// 原生 View 中使用 Compose@SuppressLint("SetTextI18n")fun ComponentActivity.composeView01() {  val composeView = ComposeView(this@composeView01)  val rootView = LinearLayout(this).apply {    orientation = LinearLayout.VERTICAL    addView(TextView(this@composeView01).apply {      text = "我是原生TextView"      textSize = 20f.dp2px      setBackgroundColor(AndroidColor.YELLOW)    })    addView(composeView)  }  setContentView(rootView, ViewGroup.LayoutParams(matchParent, matchParent))  composeView.setContent {    CustomView01()  }}@Composableprivate fun CustomView01() {  Text(    text = "我是 Compose 中 的 Text",    fontSize = 25.sp,    color = Color.Blue,    modifier = Modifier.background(Color.Red)  )}