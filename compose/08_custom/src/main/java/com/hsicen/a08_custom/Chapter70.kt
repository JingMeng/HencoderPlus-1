package com.hsicen.a08_customimport android.annotation.SuppressLintimport android.icu.text.DateFormatimport android.widget.TextViewimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.paddingimport androidx.compose.material.MaterialThemeimport androidx.compose.material.Surfaceimport androidx.compose.material.Textimport androidx.compose.runtime.*import androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.compose.ui.viewinterop.AndroidViewimport com.hsicen.a08_custom.ui.theme.HencoderPlusThemeimport com.hsicen.extension.extensions.dp2pximport java.util.Date/******====== 69.与传统View的混用 ======******//** * 为什么需要混⽤： *  1.从 View 迁移到 Compose 期间，会需要暂时地在 View ⾥写 Compose 和在 Compose ⾥写View *  2.Compose 没实现的 View（SurfaceView和TextureView）需要嵌⼊到 Compose ⾥使⽤ * * 在 View ⾥使⽤ Compose: *  1.ComposeView.setContent() *  2.⽤ Java / Kotlin 代码或者⽤ XML 布局⽂件来提供 * * 在 Compose ⾥使⽤ View: *  1.AndroidView() —— 是 Composable 函数，不是 View *  2.需要依赖 Compose 变量⾃动更新的，写进最后⼀个参数（函数类型）⾥⾯，可以跟随重组过程⾃动重新执⾏，实现刷新。 */// Compose 中使用原生 View@SuppressLint("SetTextI18n")fun ComponentActivity.composeView02() {  setContent {    HencoderPlusTheme {      Surface(        modifier = Modifier.fillMaxSize(),        color = MaterialTheme.colors.background      ) {        CustomView01()      }    }  }}@SuppressLint("SetTextI18n")@Composableprivate fun CustomView01() {  var changeText by remember {    mutableStateOf("初始化文字")  }  Column {    Text(      text = "我是 Compose 中 的 Text",      fontSize = 25.sp,      color = Color.Blue,      modifier = Modifier        .padding(16.dp)        .background(Color.Red)        .padding(16.dp)        .clickable {          changeText = DateFormat            .getTimeInstance()            .format(Date())        }    )    AndroidView(factory = {      // load native view      TextView(it).apply {        changeText = "我是原生TextView"        textSize = 20f.dp2px        setBackgroundColor(android.graphics.Color.YELLOW)      }    }, modifier = Modifier.padding(16.dp)) {      it.text = "原生: $changeText"    }  }}