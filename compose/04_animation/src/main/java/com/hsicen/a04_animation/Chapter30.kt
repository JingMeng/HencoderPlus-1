package com.hsicen.a04_animationimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.compose.animation.core.animateDpimport androidx.compose.animation.core.animateDpAsStateimport androidx.compose.animation.core.updateTransitionimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.setValueimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.unit.dp/** * 作者：hsicen  2023/5/8 21:02 * 邮箱：codinghuang@163.com * 作用： * 描述：HencoderPlus *//******====== 30. Transition：多属性的状态切换 ======******/fun ComponentActivity.composeAnimation17() {  var big by mutableStateOf(false)  setContent {    val size by animateDpAsState(if (big) 960.dp else 480.dp, label = "")    Box(      Modifier        .size(size)        .background(Color.Green)        .clickable {          big = !big        })  }}fun ComponentActivity.composeAnimation18() {  var big by mutableStateOf(false)  setContent {    val updateTransition = updateTransition(big, label = "")    val size by updateTransition.animateDp(label = "") {      if (it) 960.dp else 480.dp    }    Box(      Modifier        .size(size)        .background(Color.Green)        .clickable {          big = !big        })  }}fun ComponentActivity.composeAnimation19() {  var big by mutableStateOf(false)  setContent {    val updateTransition = updateTransition(big, label = "big")    val size by updateTransition.animateDp(label = "size") { if (it) 960.dp else 480.dp }    val corner by updateTransition.animateDp(label = "corner") { if (it) 0.dp else 180.dp }    Box(      Modifier        .size(size)        .clip(RoundedCornerShape(corner))        .background(Color.Green)        .clickable {          big = !big        })  }}