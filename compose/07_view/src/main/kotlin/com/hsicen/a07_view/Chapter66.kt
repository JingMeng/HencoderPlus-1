package com.hsicen.a07_viewimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.clickableimport androidx.compose.foundation.gestures.Orientationimport androidx.compose.foundation.gestures.detectDragGesturesimport androidx.compose.foundation.gestures.draggableimport androidx.compose.foundation.gestures.rememberDraggableStateimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.offsetimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.material.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableFloatStateOfimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.rememberCoroutineScopeimport androidx.compose.runtime.setValueimport androidx.compose.ui.Modifierimport androidx.compose.ui.geometry.Offsetimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.input.pointer.pointerInputimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.unit.IntOffsetimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport kotlinx.coroutines.launchimport kotlin.math.roundToInt/******====== 66.二维滑动监测 ======******//** * detectDragGestures() *    套在 pointerInput() 的里面，用作二维滑动监测的工具； *    参数 change ：滑动时间背后的触摸时间中的滑动的手指信息； *    参数 dragAmount ：滑动的位移 *    几个兄弟参数： *      detectVerticalDragGestures() *      detectHorizontalDragGestures() *      detectDragGesturesAfterLongPress() * * 和 Modifier.draggable() 的区别 *  1.draggable() 更高级，例如提供了DraggableState 以供手动拖拽； *  2.detectDragGestures() 更底层，例如提供了change 参数的手指信息。 *  3.没有本质区别 */fun ComponentActivity.composeView07() {    setContent {        DetachDrag02()    }}@Composableprivate fun DetachDrag01() {    val scope = rememberCoroutineScope()    var offset by remember { mutableFloatStateOf(0f) }    val dragState = rememberDraggableState {        println("滑动位置：${it}")        offset += it    }    LazyColumn(        Modifier            .fillMaxSize()            .offset { IntOffset(offset.toInt(), 0) }            .draggable(dragState, Orientation.Horizontal)            .clickable {                scope.launch {                    dragState.drag {                        dragBy(100f)                    }                }            }    ) {        item {            repeat(20) {                Text(                    text = "第二部分：$it",                    fontSize = 30.sp,                    textAlign = TextAlign.Start,                    modifier = Modifier                        .padding(10.dp)                        .fillMaxWidth()                )            }        }    }}@Composableprivate fun DetachDrag02() {    var offset by remember {        mutableStateOf(Offset(0f, 0f))    }    Box(Modifier.fillMaxSize()) {        Text(text = "我可以进行二维拖拽",            textAlign = TextAlign.Center,            color = Color.Blue,            fontSize = 18.sp,            modifier = Modifier                .pointerInput(Unit) {                    detectDragGestures { _, dragAmount ->                        offset += dragAmount                    }                }                .size(100.dp)                .background(Color.Gray)                .offset { IntOffset(offset.x.roundToInt(), offset.y.roundToInt()) }        )    }}