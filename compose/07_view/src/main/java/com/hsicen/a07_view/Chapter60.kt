package com.hsicen.a07_viewimport android.content.Contextimport android.graphics.Cameraimport android.graphics.Rectimport android.util.AttributeSetimport android.view.Viewimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.compose.animation.core.Animatableimport androidx.compose.animation.core.infiniteRepeatableimport androidx.compose.animation.core.tweenimport androidx.compose.foundation.Canvasimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.material.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.drawBehindimport androidx.compose.ui.draw.drawWithContentimport androidx.compose.ui.geometry.Offsetimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.graphics.ImageBitmapimport androidx.compose.ui.graphics.Paintimport androidx.compose.ui.graphics.drawscope.drawIntoCanvasimport androidx.compose.ui.graphics.graphicsLayerimport androidx.compose.ui.graphics.nativeCanvasimport androidx.compose.ui.res.imageResourceimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.IntSizeimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport kotlin.math.roundToIntimport android.graphics.Canvas as AndroidCanvasimport android.graphics.Color as AndroidColorimport android.graphics.Paint as AndroidPaint/******====== 60.⾃定义绘制 ======******//** * 在哪⾥写： *  1.基于已有的组件增加效果 *    ① drawBehind() *    ② drawWithContent() *  2.全新绘制 *    ① Canvas() * * 怎么写： *  1.利⽤ DrawScope 的绘制函数（ drawXxx() ）来绘制 *  2.利⽤ DrawScope 的对应函数来进⾏裁切和⼏何变换 * * 关于 Compose 做不到的事： *  1.例如多维度的三维旋转---下沉到 Compose 的 Canvas 或者原⽣的 Canvas 进⾏绘制。 */fun ComponentActivity.composeView01() {  setContent {    ComposeDraw05()  }}@Preview@Composableprivate fun ComposeDraw01() {  Box(    modifier = Modifier      .drawBehind {        drawRect(Color.Yellow)      }      .padding(16.dp)      .drawBehind {        drawRect(Color.Green)      }  ) {    Text(      text = "Compose",      fontSize = 30.sp    )  }}@Preview@Composableprivate fun ComposeDraw02() {  Box(    modifier = Modifier.drawWithContent {      drawRect(Color.Yellow)      drawContent()      drawLine(        Color.Black,        Offset(0f, size.height / 2f),        Offset(size.width, size.height / 2),        8.dp.value      )    }  ) {    Text(      text = "Compose",      fontSize = 30.sp    )  }}@Preview@Composableprivate fun ComposeDraw03() {  Box(    modifier = Modifier      .size(120.dp, 50.dp)      .drawBehind {        drawRect(Color.Yellow)        drawLine(          Color.Black,          Offset(0f, size.height / 2f),          Offset(size.width, size.height / 2),          8.dp.value        )      }  )}@Preview@Composableprivate fun ComposeDraw04() {  Canvas(Modifier.size(120.dp, 50.dp)) {    drawRect(Color.Yellow)    drawLine(      Color.Black,      Offset(0f, size.height / 2f),      Offset(size.width, size.height / 2),      8.dp.value    )  }}@Preview@Composableprivate fun ComposeDraw05() {  val imgBitmap = ImageBitmap.imageResource(R.drawable.hsicen)  Canvas(    Modifier      .size(250.dp, 250.dp)      .padding(48.dp)      //.rotate(45f) // 二维旋转      .graphicsLayer {        rotationY = 45f        rotationX = 45f      }  ) {    drawImage(      imgBitmap, dstSize = IntSize(        size.width.roundToInt(),        size.height.roundToInt()      )    )  }}// Canvas 下层@Preview@Composableprivate fun ComposeDraw06() {  val imgBitmap = ImageBitmap.imageResource(R.drawable.hsicen)  val paint by remember { mutableStateOf(Paint()) }  val camera by remember { mutableStateOf(Camera()) }  val rotateAnimation = remember { Animatable(0f) }  val androidPaint by remember { mutableStateOf(AndroidPaint()) }  val strRect by remember { mutableStateOf(Rect()) }  LaunchedEffect(Unit) {    rotateAnimation.animateTo(      360f,      infiniteRepeatable(tween(2500))    )  }  Canvas(    Modifier      .size(250.dp, 250.dp)  ) {    drawIntoCanvas {      // it.drawImage(imgBitmap, Offset.Zero, paint)      it.translate(size.width / 2, size.height / 2)      it.rotate(-45f)      camera.save()      camera.rotateX(rotateAnimation.value)      camera.applyToCanvas(it.nativeCanvas)      camera.restore()      it.rotate(45f)      it.translate(-size.width / 2, -size.height / 2)      it.drawImageRect(        imgBitmap,        dstSize = IntSize(size.width.roundToInt(), size.height.roundToInt()),        paint = paint      )      androidPaint.color = AndroidColor.RED      androidPaint.style = AndroidPaint.Style.FILL      androidPaint.strokeWidth = 4.sp.value      androidPaint.textSize = 80.sp.value      val str = "Hello Compose"      androidPaint.getTextBounds(str, 0, str.length, strRect)      it.nativeCanvas.drawText(        str,        (size.width - strRect.width()) / 2f,        (size.height) / 2f + strRect.height(),        androidPaint      )    }  }}class CustomView @JvmOverloads constructor(  context: Context,  attrs: AttributeSet? = null,  defStyleAttr: Int = 0) : View(context, attrs, defStyleAttr) {  private val mPaint = AndroidPaint().apply {    strokeCap = AndroidPaint.Cap.ROUND    color = AndroidColor.YELLOW  }  override fun onDraw(canvas: AndroidCanvas) {    super.onDraw(canvas)    canvas.drawCircle(50f, 50f, 30f, mPaint)    canvas.save()    canvas.rotate(-45f)    canvas.restore()    //canvas.drawBitmap()  }}