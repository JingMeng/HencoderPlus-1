package com.hsicen.a07_viewimport android.content.Contextimport android.graphics.Paintimport android.util.AttributeSetimport android.view.Viewimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.compose.foundation.Canvasimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.material.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.drawBehindimport androidx.compose.ui.draw.drawWithContentimport androidx.compose.ui.geometry.Offsetimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.graphics.ImageBitmapimport androidx.compose.ui.res.imageResourceimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.IntSizeimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport kotlin.math.roundToIntimport android.graphics.Canvas as AndroidCanvasimport android.graphics.Color as AndroidColor/******====== 60.⾃定义绘制 ======******//** * 在哪⾥写： *  1.基于已有的组件增加效果 *    ① drawBehind() *    ② drawWithContent() *  2.全新绘制 *    ① Canvas() * * 怎么写： *  1.利⽤ DrawScope 的绘制函数（ drawXxx() ）来绘制 *  2.利⽤ DrawScope 的对应函数来进⾏裁切和⼏何变换 * * 关于 Compose 做不到的事： *  1.例如多维度的三维旋转---下沉到 Compose 的 Canvas 或者原⽣的 Canvas 进⾏绘制。 */fun ComponentActivity.composeView01() {  setContent {    ComposeDraw05()  }}@Preview@Composableprivate fun ComposeDraw01() {  Box(    modifier = Modifier      .drawBehind {        drawRect(Color.Yellow)      }      .padding(16.dp)      .drawBehind {        drawRect(Color.Green)      }  ) {    Text(      text = "Compose",      fontSize = 30.sp    )  }}@Preview@Composableprivate fun ComposeDraw02() {  Box(    modifier = Modifier.drawWithContent {      drawRect(Color.Yellow)      drawContent()      drawLine(        Color.Black,        Offset(0f, size.height / 2f),        Offset(size.width, size.height / 2),        8.dp.value      )    }  ) {    Text(      text = "Compose",      fontSize = 30.sp    )  }}@Preview@Composableprivate fun ComposeDraw03() {  Box(    modifier = Modifier      .size(120.dp, 50.dp)      .drawBehind {        drawRect(Color.Yellow)        drawLine(          Color.Black,          Offset(0f, size.height / 2f),          Offset(size.width, size.height / 2),          8.dp.value        )      }  )}@Preview@Composableprivate fun ComposeDraw04() {  Canvas(Modifier.size(120.dp, 50.dp)) {    drawRect(Color.Yellow)    drawLine(      Color.Black,      Offset(0f, size.height / 2f),      Offset(size.width, size.height / 2),      8.dp.value    )  }}@Preview@Composableprivate fun ComposeDraw05() {  val imgBitmap = ImageBitmap.imageResource(R.drawable.hsicen)  Canvas(Modifier.size(300.dp, 300.dp)) {    drawImage(      imgBitmap, dstSize = IntSize(        size.width.roundToInt(),        size.height.roundToInt()      )    )  }}class CustomView @JvmOverloads constructor(  context: Context,  attrs: AttributeSet? = null,  defStyleAttr: Int = 0) : View(context, attrs, defStyleAttr) {  private val mPaint = Paint().apply {    strokeCap = Paint.Cap.ROUND    color = AndroidColor.YELLOW  }  override fun onDraw(canvas: AndroidCanvas) {    super.onDraw(canvas)    canvas.drawCircle(50f, 50f, 30f, mPaint)    //canvas.drawBitmap()  }}