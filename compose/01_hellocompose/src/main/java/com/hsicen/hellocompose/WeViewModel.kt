package com.hsicen.hellocomposeimport android.app.Applicationimport android.util.Logimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateListOfimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.setValueimport androidx.lifecycle.AndroidViewModelimport com.google.accompanist.pager.ExperimentalPagerApiimport com.hsicen.hellocompose.data.Chatimport com.hsicen.hellocompose.data.Msgimport com.hsicen.hellocompose.data.Userimport com.hsicen.hellocompose.model.AuthenticationHelperimport com.hsicen.hellocompose.model.GraphHelperimport com.hsicen.hellocompose.ui.theme.WeComposeThemeimport com.microsoft.identity.client.IAuthenticationResultimport com.microsoft.identity.client.exception.MsalClientExceptionimport com.microsoft.identity.client.exception.MsalServiceExceptionimport com.microsoft.identity.client.exception.MsalUiRequiredExceptionimport com.microsoft.graph.models.User as MUser/** * 作者：hsicen  12/8/21 22:55 * 邮箱：codinghuang@163.com * 作用： * 描述：数据 maintain */@OptIn(ExperimentalPagerApi::class)class WeViewModel(private val app: Application) : AndroidViewModel(app) {  // 聊天数据  var chats by mutableStateOf(    listOf(      Chat(        friend = User("gaolaoshi", "高老师", R.drawable.avatar_gaolaoshi),        mutableStateListOf(          Msg(User("gaolaoshi", "高老师", R.drawable.avatar_gaolaoshi), "锄禾日当午", "14:20"),          Msg(User.Me, "汗滴禾下土", "14:20"),          Msg(User("gaolaoshi", "高老师", R.drawable.avatar_gaolaoshi), "谁知盘中餐", "14:20"),          Msg(User.Me, "粒粒皆辛苦", "14:20"),          Msg(User("gaolaoshi", "高老师", R.drawable.avatar_gaolaoshi), "唧唧复唧唧，木兰当户织。不闻机杼声，惟闻女叹息。", "14:20"),          Msg(User.Me, "双兔傍地走，安能辨我是雄雌？", "14:20"),          Msg(User("gaolaoshi", "高老师", R.drawable.avatar_gaolaoshi), "床前明月光，疑是地上霜。", "14:20"),          Msg(User.Me, "吃饭吧？", "14:20"),        )      ),      Chat(        friend = User("diuwuxian", "丢物线", R.drawable.avatar_diuwuxian),        mutableStateListOf(          Msg(User("diuwuxian", "丢物线", R.drawable.avatar_diuwuxian), "哈哈哈", "13:48"),          Msg(User.Me, "哈哈昂", "13:48"),          Msg(User("diuwuxian", "丢物线", R.drawable.avatar_diuwuxian), "你笑个屁呀", "13:48").apply { read = false },        )      ),    )  )  // 联系人数据  val contacts by mutableStateOf(    listOf(      User("gaolaoshi", "高老师", R.drawable.avatar_gaolaoshi),      User("diuwuxian", "丢物线", R.drawable.avatar_diuwuxian)    )  )  var theme by mutableStateOf(WeComposeTheme.Theme.Light)  var currentChat: Chat? by mutableStateOf(null)  var chatting by mutableStateOf(false)  var officePage by mutableStateOf(false)  fun startChat(chat: Chat) {    chatting = true    currentChat = chat  }  fun endChat(): Boolean {    if (chatting) {      chatting = false      return true    }    return false  }  fun startOffice() {    officePage = true  }  fun endOffice(): Boolean {    if (officePage) {      officePage = false      return true    }    return false  }  fun boom(chat: Chat) {    chat.msgs.add(Msg(User.Me, "\uD83D\uDCA3", "15:10").apply { read = true })  }  var mAct: MainActivity? = null  var mUser: MUser? by mutableStateOf(null)  private var mAuthHelper: AuthenticationHelper? = null  private var mSignedIn = false  private var isInSign = false  fun initSdk() {    isInSign = true    AuthenticationHelper.getInstance(app)      .thenAccept { authHelper ->        mAuthHelper = authHelper        if (mSignedIn.not()) {          doSilentSign(false)        } else isInSign = false      }.exceptionally {        println("hsc -> Error create auth helper: ${it.stackTrace}")        null      }  }  private fun doSilentSign(interrupt: Boolean) {    mAuthHelper?.let { helper ->      helper.acquireTokenSilently()        .thenAccept {          handleSignSuccess(it)        }.exceptionally {          val cause = it.cause          if (cause is MsalUiRequiredException) {            Log.d("hsc", "Interactive login required")            if (interrupt) doInteractiveSign()          } else if (cause is MsalClientException) {            if (cause.errorCode == "no_current_account" ||              cause.errorCode == "no_account_found"            ) {              Log.d("hsc", "No current account, interactive login required")              if (interrupt) doInteractiveSign()            }          } else handleSignInFailure(cause)          isInSign = false          null        }    }  }  private fun doInteractiveSign() {    val activity = mAct ?: return    mAuthHelper?.acquireTokenInteractively(activity)      ?.thenAccept { handleSignSuccess(it) }      ?.exceptionally {        handleSignInFailure(it)        isInSign = false        null      }  }  private fun handleSignSuccess(it: IAuthenticationResult?) {    val result = it ?: return    val token = result.accessToken    Log.d("hsc", "Access token is $token")    val helper = GraphHelper.instance    helper.getUser()      .thenAccept { user ->        Log.d("hsc", "Get user info success: $user")        mUser = user        isInSign = false        mSignedIn = true      }.exceptionally {        Log.d("hsc", "Get user info failed: $it")        isInSign = false        mSignedIn = false        null      }  }  private fun handleSignInFailure(cause: Throwable?) {    when (cause) {      is MsalServiceException -> {        // Exception when communicating with the auth server, likely config issue        Log.e("hsc", "Service error authenticating", cause);      }      is MsalClientException -> {        // Exception inside MSAL, more info inside MsalError.java        Log.e("hsc", "Client error authenticating", cause);      }      else -> {        Log.e("hsc", "Unhandled exception authenticating", cause);      }    }  }  fun signIn() {    isInSign = true    doSilentSign(true)  }  fun signOut() {    mAuthHelper?.signOut()    mSignedIn = false    mUser = null  }}