package com.hsicen.a06_coroutineimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.wrapContentWidthimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.sp/******====== 53. Side Effect ======******//** * 直接使用函数的返回值替代函数，如果没有影响，则该函数没有【副作用】/【附带效应】 * * Side Effect: *  1.来源于医学领域的「药物副作⽤」：除了主作⽤之外的其他作⽤ *  2.不只是指「负⾯作⽤」 *  3.在软件开发领域，「函数的副作⽤」指的是对函数外的程序环境有影响的⾏为 * *  Composable 函数的副作⽤: *    由于 Composable 函数在重组过程中可能会不完全执⾏、不执⾏或者多次重复执⾏， *    这将导致 Composable 函数中的副作⽤代码⾏为变得不可预期， *    所以 Compose 官⽅建议不要在 Composable 函数中写副作⽤代码。 * *  SideEffect(): *    1.⽤于特殊的「需要副作⽤」的场景，例如埋点 *    2.会在重组过程完成之后执⾏ */fun ComponentActivity.composeCoroutine01() {  setContent {    SideEffect03()  }}@Composableprivate fun SideEffect01() {  Text(text = "Hello Compose 1!", fontSize = 30.sp)  var big = false  fun change() {    big = true  }  fun log() {    println(big)  }  fun copy() {    val copy = big  }}@Composableprivate fun SideEffect02() {  Column(    Modifier      .padding(16.dp)      .wrapContentWidth()  ) {    val names = arrayOf("春天欢快跳舞", "夏天暴跳如雷", "秋天收起躁动", "冬天冷静回顾")    for (name in names) {      Text(text = name, fontSize = 30.sp)      Spacer(        modifier = Modifier          .height(2.dp)          .background(Color.Gray)      )    }  }}@Composableprivate fun SideEffect03() {  var count: Int  Column(    Modifier      .padding(16.dp)      .wrapContentWidth()  ) {    val names = arrayOf("春天欢快跳舞", "夏天暴跳如雷", "秋天收起躁动", "冬天冷静回顾")    count = names.size    for (name in names) {      Text(text = name, fontSize = 30.sp, fontWeight = FontWeight.Bold)      // count += 1 cause side effect      Spacer(        modifier = Modifier          .height(2.dp)          .background(Color.Gray)      )    }    Spacer(Modifier.height(16.dp))    Text(text = "count: $count")  }}