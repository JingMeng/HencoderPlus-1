package com.hsicen.a06_coroutineimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.paddingimport androidx.compose.material.Buttonimport androidx.compose.material.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.DisposableEffectimport androidx.compose.runtime.SideEffectimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.sp/******====== 54.DisposableEffect() ======******//** * 和 SideEffect() 的区别 *  1.增加了「离开界⾯」的监听：⽤ onDispose {} 来设置； *  2.增加了 key 参数，在设置了⼀个或者多个 key 的时候， *    key 值的改变会触发 DisposableEffect() 的重启； *    并且 key 不变的时候，就算重组也不会导致 DisposableEffect()的重启。 * * 写法：和 SideEffect() ⼏乎⼀样的写法，只是有了更多功能。 */fun ComponentActivity.composeCoroutine02() {  setContent {    DisposableEffect03()  }}@Composableprivate fun DisposableEffect01() {  Column(modifier = Modifier.padding(16.dp)) {    Text(      text = "Hello Compose 1!",      fontSize = 30.sp,      modifier = Modifier.clickable {        println("clicked it.")      })    DisposableEffect(Unit) {// 会因 key 发生改变而重新执行      println("start disposable effect.")      onDispose {        println("end disposable effect.")      }    }  }}@Composableprivate fun DisposableEffect02() {  var showText by remember { mutableStateOf(false) }  Button(modifier = Modifier.padding(16.dp), onClick = {    println("clicked it.")    showText = !showText  }) {    Text(      text = "Hello Compose 2!",      fontSize = 20.sp    )    if (showText) Text(      text = "Hello World!",      fontSize = 24.sp,      color = Color.Red    )    SideEffect {      println("@@@ SideEffect")    }    DisposableEffect(Unit) {// 会因 key 发生改变而重新执行      println("@@@ start DisposableEffect.")      onDispose {        println("@@@ end DisposableEffect.")      }    }  }}@Composableprivate fun DisposableEffect03() {  var showText by remember { mutableStateOf(false) }  Button(modifier = Modifier.padding(16.dp), onClick = {    println("clicked it.")    showText = !showText  }) {    Text(      text = "Hello Compose 2!",      fontSize = 20.sp    )    if (showText) Text(      text = "Hello World!",      fontSize = 24.sp,      color = Color.Red    )    SideEffect {      println("@@@ SideEffect")    }    DisposableEffect(showText) {// 会因 key 发生改变而重新执行      println("@@@ 进入 DisposableEffect.")      onDispose {        println("@@@ 离开 DisposableEffect.")      }    }  }}