package com.hsicen.a06_coroutineimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.paddingimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.DisposableEffectimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.SideEffectimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Modifierimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport kotlinx.coroutines.delay/******====== 54.LaunchedEffect() ======******//** * 作⽤：在 Composable 组件内开启协程。 * * 和 DisposableEffect() 的关系： *  本质上相当于特殊形式的 DisposableEffect() ：进⼊界⾯的事件是开启协程， *  离开界⾯的事件是取消协程。 * * 适⽤场景：和界⾯的显示事件绑定的协程。 */fun ComponentActivity.composeCoroutine03() {  setContent {    LaunchedEffect01()  }}@Composableprivate fun LaunchedEffect01() {  var show by remember { mutableStateOf(true) }  Column(modifier = Modifier.padding(16.dp)) {    Text(      text = "Hello Compose 1!",      fontSize = 30.sp,      modifier = Modifier.clickable {        println("@@@ Clicked it.")        show = !show      })    if (show) Text(text = "Hello World!")    SideEffect {      println("@@@ Enter SideEffect.")    }    DisposableEffect(Unit) {// 会因 key 发生改变而重新执行      println("@@@ Enter DisposableEffect.")      onDispose {        println("@@@ Leave DisposableEffect.")      }    }    // a special style of disposable effect    LaunchedEffect(Unit) {      // 在 Composable 组件显示完成之后启动协程      // 在 Key 参数发生改变之后重启协程      println("@@@ Enter LaunchedEffect.")      delay(3000)      show = false    }  }}