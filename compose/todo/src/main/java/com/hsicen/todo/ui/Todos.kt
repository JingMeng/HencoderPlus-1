package com.hsicen.todo.uiimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.WindowInsetsimport androidx.compose.foundation.layout.excludeimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.imeimport androidx.compose.foundation.layout.navigationBarsimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.LazyListStateimport androidx.compose.foundation.lazy.itemsimport androidx.compose.foundation.lazy.rememberLazyListStateimport androidx.compose.material3.Checkboximport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.LocalTextStyleimport androidx.compose.material3.Scaffoldimport androidx.compose.material3.ScaffoldDefaultsimport androidx.compose.material3.Surfaceimport androidx.compose.material3.Textimport androidx.compose.material3.TopAppBarDefaultsimport androidx.compose.material3.rememberTopAppBarStateimport androidx.compose.runtime.Composableimport androidx.compose.runtime.rememberCoroutineScopeimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.input.nestedscroll.nestedScrollimport androidx.compose.ui.text.style.TextDecorationimport androidx.compose.ui.unit.dpimport com.hsicen.todo.data.Todoimport com.hsicen.todo.data.TodoUiStateimport kotlinx.coroutines.launch@OptIn(ExperimentalMaterial3Api::class)@Composablefun TodosContent(  uiState: TodoUiState,  modifier: Modifier = Modifier,) {  val scrollState = rememberLazyListState()  val topBarState = rememberTopAppBarState()  val scrollBehavior = TopAppBarDefaults.pinnedScrollBehavior(topBarState)  val scope = rememberCoroutineScope()  Scaffold(    // header content    topBar = {      TodoListBar(        todoName = uiState.todoName,        todoNum = uiState.todoNums,        scrollBehavior = scrollBehavior,      )    },    // Exclude ime and navigation bar padding    contentWindowInsets = ScaffoldDefaults      .contentWindowInsets      .exclude(WindowInsets.navigationBars)      .exclude(WindowInsets.ime),    modifier = modifier.nestedScroll(scrollBehavior.nestedScrollConnection)  ) { paddingValues ->    Column(      modifier        .fillMaxSize()        .padding(paddingValues)    ) {      Todos(        todos = uiState.todos,        modifier = modifier.weight(1f),        scrollState = scrollState      )      UserInput(        onMsgSend = { content ->          uiState.addTodo(Todo().apply {            name = content          })        },        resetScroll = {          scope.launch { scrollState.scrollToItem(0) }        },      )    }  }}@Composablefun Todos(  todos: List<Todo>,  scrollState: LazyListState,  modifier: Modifier = Modifier) {  Surface(    modifier = Modifier      .fillMaxWidth()      .padding(16.dp)  ) {    LazyColumn {      items(todos) { todo ->        Row(          verticalAlignment = Alignment.CenterVertically,          modifier = Modifier            .padding(8.dp)            .clickable {              todo.completed = !todo.completed            }        ) {          Checkbox(checked = todo.completed, onCheckedChange = {            todo.completed = it          })          Text(            text = todo.name,            style = if (todo.completed) LocalTextStyle.current.copy(textDecoration = TextDecoration.LineThrough)            else LocalTextStyle.current,            modifier = Modifier.padding(start = 8.dp)          )        }      }    }  }}