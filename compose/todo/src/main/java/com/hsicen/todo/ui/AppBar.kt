package com.hsicen.todo.uiimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.RowScopeimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.outlined.Infoimport androidx.compose.material.icons.outlined.Searchimport androidx.compose.material3.AlertDialogimport androidx.compose.material3.CenterAlignedTopAppBarimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.Iconimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Textimport androidx.compose.material3.TextButtonimport androidx.compose.material3.TopAppBarScrollBehaviorimport androidx.compose.runtime.Composableimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.res.stringResourceimport androidx.compose.ui.semantics.Roleimport androidx.compose.ui.semantics.contentDescriptionimport androidx.compose.ui.semantics.roleimport androidx.compose.ui.semantics.semanticsimport androidx.compose.ui.unit.dpimport com.hsicen.todo.R@Composablefun TodoIcon(  contentDescription: String?,  modifier: Modifier = Modifier) {  val semantics = if (contentDescription != null) {    Modifier.semantics {      this.contentDescription = contentDescription      this.role = Role.Image    }  } else {    Modifier  }  Box(modifier = modifier.then(semantics)) {    Icon(      painter = painterResource(id = R.drawable.ic_back),      contentDescription = null,      tint = MaterialTheme.colorScheme.primaryContainer    )    Icon(      painter = painterResource(id = R.drawable.ic_front),      contentDescription = null,      tint = MaterialTheme.colorScheme.primary    )  }}@OptIn(ExperimentalMaterial3Api::class)@Composablefun TopAppBar(  modifier: Modifier = Modifier,  scrollBehavior: TopAppBarScrollBehavior? = null,  onNavIconPressed: () -> Unit = { },  title: @Composable () -> Unit,  actions: @Composable RowScope.() -> Unit = {}) {  CenterAlignedTopAppBar(    modifier = modifier,    actions = actions,    title = title,    scrollBehavior = scrollBehavior,    navigationIcon = {      TodoIcon(        contentDescription = stringResource(id = R.string.navigation_drawer_open),        modifier = Modifier          .size(64.dp)          .clickable(onClick = onNavIconPressed)          .padding(16.dp)      )    }  )}@OptIn(ExperimentalMaterial3Api::class)@Composablefun TodoListBar(  todoName: String,  todoNum: Int,  modifier: Modifier = Modifier,  scrollBehavior: TopAppBarScrollBehavior? = null,  onNavIconPressed: () -> Unit = { }) {  var functionalityNotAvailablePopupShown by remember { mutableStateOf(false) }  if (functionalityNotAvailablePopupShown) {    FunctionalityNotAvailablePopup { functionalityNotAvailablePopupShown = false }  }  TopAppBar(    modifier = modifier,    scrollBehavior = scrollBehavior,    onNavIconPressed = onNavIconPressed,    title = {      Column(horizontalAlignment = Alignment.CenterHorizontally) {        // Channel name        Text(          text = todoName,          style = MaterialTheme.typography.titleMedium        )        // Number of members        Text(          text = stringResource(R.string.members, todoNum),          style = MaterialTheme.typography.bodySmall,          color = MaterialTheme.colorScheme.onSurfaceVariant        )      }    },    actions = {      // Search icon      Icon(        imageVector = Icons.Outlined.Search,        tint = MaterialTheme.colorScheme.onSurfaceVariant,        modifier = Modifier          .clickable(onClick = { functionalityNotAvailablePopupShown = true })          .padding(horizontal = 12.dp, vertical = 16.dp)          .height(24.dp),        contentDescription = stringResource(id = R.string.search)      )      // Info icon      Icon(        imageVector = Icons.Outlined.Info,        tint = MaterialTheme.colorScheme.onSurfaceVariant,        modifier = Modifier          .clickable(onClick = { functionalityNotAvailablePopupShown = true })          .padding(horizontal = 12.dp, vertical = 16.dp)          .height(24.dp),        contentDescription = stringResource(id = R.string.info)      )    }  )}@Composablefun FunctionalityNotAvailablePopup(onDismiss: () -> Unit) {  AlertDialog(    onDismissRequest = onDismiss,    text = {      Text(        text = "Functionality not available \uD83D\uDE48",        style = MaterialTheme.typography.bodyMedium      )    },    confirmButton = {      TextButton(onClick = onDismiss) {        Text(text = "CLOSE")      }    }  )}