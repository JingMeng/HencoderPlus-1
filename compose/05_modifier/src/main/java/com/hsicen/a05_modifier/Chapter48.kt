package com.hsicen.a05_modifierimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.compose.foundation.ExperimentalFoundationApiimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.relocation.BringIntoViewRequesterimport androidx.compose.foundation.relocation.bringIntoViewRequesterimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.Modifierimport androidx.compose.ui.layout.OnRemeasuredModifierimport androidx.compose.ui.layout.onSizeChangedimport androidx.compose.ui.unit.IntSize/******====== 48. OnRemeasuredModifier 的作用、写法和原理 ======******//** * 作用：监听 Composable 函数或者 LayoutModifier 的「测量完成」事件。 * 写法：[ModifierOnRemeasured01] * * 原理：整体原理上，和旧版的⼀致：按照 LayoutModifier 来把 LayoutNode 内部分割成多。 *  1.以前是多级 LayoutNodeWrapper ，新版是多级 NodeCoordinator； *  2.每层有它们各⾃的 Modifier 集合 *    以前是 Modifier 存储在⾃⼰所属的 LayoutNodeWrapper ，新版是统⼀存储到 LayoutNode.nodes ， *    然后在每个 Node ⾃⼰的内部维护与 NodeCoordinator 的对应关系。 * OnRemeasuredModifier 的原理： *  1.Modifier.set() 中对 OnRemeasuredModifier 的存储：和其他 Modifier ⼀样，存在 Layout.nodes() ⾥，被 Node 对象包着； *  2.回调函数的执⾏：在 InnerNodeCoordinator 以及 LayoutModifierNodeCoordinator的 measure() 函数⾥： *    测量完成后，调⽤⾃⼰所关联的所有 OnRemeasuredModifier 的 onRemeasured()。 */fun ComponentActivity.composeModifier10() {  setContent {    ModifierOnRemeasured01()  }}@OptIn(ExperimentalFoundationApi::class)@Composablefun ModifierOnRemeasured01() {  Box {    Text(text = "窗前明月光")  }  // 写法1 尺寸改变时回调  Modifier.onSizeChanged {  }  // 写法2 每次测量时回调  Modifier.then(object : OnRemeasuredModifier {    override fun onRemeasured(size: IntSize) {    }  })  // 案例  val viewRequester = BringIntoViewRequester()  Modifier.bringIntoViewRequester(viewRequester)}