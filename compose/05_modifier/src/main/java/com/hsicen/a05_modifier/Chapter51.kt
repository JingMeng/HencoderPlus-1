package com.hsicen.a05_modifierimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.compose.foundation.layout.offsetimport androidx.compose.foundation.layout.sizeimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableIntStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Modifierimport androidx.compose.ui.layout.onGloballyPositionedimport androidx.compose.ui.layout.onPlacedimport androidx.compose.ui.layout.positionInParentimport androidx.compose.ui.layout.positionInWindowimport androidx.compose.ui.unit.IntOffsetimport androidx.compose.ui.unit.dp/** * 作者：hsicen  2023/11/25 13:06 * 邮箱：codinghuang@163.com * 作用： * 描述：HencoderPlus *//******====== 51. OnGloballyPositionedModifier 的作⽤、写法和原理 ======******//** * 作用： *  在 LayoutModifier 或 @Composable 函数的尺⼨或全局位置（相对 Window 的位置）被重新赋值的时候得到回调。 * * 和 OnPlacedModifier 的区别： *  1.OnPlacedModifier 的触发时机是测量和布局过程中，⾃⼰被⽗组件摆放的时候（⾃⼰的⼦组件摆放之前）被触发； *  2.OnGloballyPositionedModifier 的触发时机是尺⼨和全局位置发⽣重新赋值的时候被触发，触发频率会⾼于 OnPlacedModifier。 * * 写法：[ModifierOnGlobalPosition01] * * 原理： *  1.存储⽅⾯和 OnPlacedModifier ⼀样； *  2.回调⽅⾯，会在更多的情况下被触发（因为包含⼀些未重新测量和布局但却改变了全局位置的情况，例如在滑动组件中被连带移动）。 */fun ComponentActivity.composeModifier13() {  setContent {    ModifierOnGlobalPosition01()  }}@Composableprivate fun ModifierOnGlobalPosition01() {  var offsetX by remember { mutableIntStateOf(50) }  var offsetY by remember { mutableIntStateOf(30) }  Text(text = "Hello Compose!",    Modifier      .size(100.dp)      .onPlaced {// measure and layout; positioned by parent        val pos = it.positionInParent()        offsetX = pos.x.toInt()        offsetY = pos.y.toInt()      }      .offset {        IntOffset(offsetX, offsetY)      }      .size(30.dp)      .onGloballyPositioned { // include onPlaced callback        val pos = it.positionInWindow()        val intSize = it.size      }      .size(20.dp) // LayoutCoordinator    // GlobalViewTreeObserver  )}