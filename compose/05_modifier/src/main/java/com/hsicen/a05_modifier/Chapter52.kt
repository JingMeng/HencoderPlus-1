package com.hsicen.a05_modifierimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.compose.foundation.layout.WindowInsetsimport androidx.compose.foundation.layout.windowInsetsPaddingimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.ExperimentalComposeUiApiimport androidx.compose.ui.Modifierimport androidx.compose.ui.layout.LayoutModifierimport androidx.compose.ui.layout.Measurableimport androidx.compose.ui.layout.MeasureResultimport androidx.compose.ui.layout.MeasureScopeimport androidx.compose.ui.layout.layoutimport androidx.compose.ui.modifier.ModifierLocalConsumerimport androidx.compose.ui.modifier.ModifierLocalProviderimport androidx.compose.ui.modifier.ModifierLocalReadScopeimport androidx.compose.ui.modifier.ProvidableModifierLocalimport androidx.compose.ui.modifier.modifierLocalConsumerimport androidx.compose.ui.modifier.modifierLocalOfimport androidx.compose.ui.modifier.modifierLocalProviderimport androidx.compose.ui.unit.Constraintsimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.sp/******====== 52. ModifierLocal 和 ModifierLocalProvider、ModifierLocalConsumer ======******//** * ModifierLocal：穿透，让局部变量可以在多个 modifier 之间进行访问，进行数据共享 * ModifierLocalProvider * ModifierLocalConsumer * * ThreadLocal: thread scope * CompositionLocal: down to child; global variable with scope,让局部变量可以在多个composition之间进行访问 * * 作用：⽤于让数据穿透 Modifier ，实现在多个 Modifier 之间的共享。 * * 写法：[ModifierLocal02] *  1.直接⽤ Modifier.modifierLocalProvider() 和 Modifier.ModifierLocalConsumer() *  2.实现 ModifierLocalProvider 和 ModifierLocalConsumer 接⼝ * * 原理： *  1.存储方面和别的大多数 Modifier 一样； *  2.回调方面，是在 NodeChain.updateFrom() 里，保存完之后直接触发(所以早于测量和布局过程) */fun ComponentActivity.composeModifier14() {  setContent {    ModifierLocal05()  }}@Composableprivate fun ModifierLocal01() {  Text(text = "Hello Compose 1!", fontSize = 35.sp,    modifier = Modifier      .layout { measurable, constraints ->        val placeable = measurable.measure(constraints)        val widthStr = placeable.width.toString()        layout(placeable.width, placeable.height) {          placeable.placeRelative(0, 0)        }      }      .layout { measurable, constraints ->        // can not access withStr        val placeable = measurable.measure(constraints)        layout(placeable.width, placeable.height) {          placeable.placeRelative(0, 0)        }      })}// use modifierLocal to access@OptIn(ExperimentalComposeUiApi::class)@Composableprivate fun ModifierLocal02() {  // 方式1  val shareKey = modifierLocalOf { "默认值" }  Text(text = "Hello Compose 2!", fontSize = 30.sp,    modifier = Modifier      .modifierLocalProvider(shareKey) {        "hsicen"      }      .modifierLocalConsumer {        println(shareKey.current)      })}@Composableprivate fun ModifierLocal03() {  //方式2  val shareKey2 = modifierLocalOf { "默认值" }  Text(    text = "Hello Compose 3!", fontSize = 30.sp,    modifier = Modifier      .then(object : LayoutModifier, ModifierLocalProvider<String> {        var widthStr = "默认值0"        override fun MeasureScope.measure(          measurable: Measurable, constraints: Constraints        ): MeasureResult {          val placeable = measurable.measure(constraints)          widthStr = placeable.width.toString()          println("设置共享值:$widthStr")          return layout(placeable.width, placeable.height) {            placeable.placeRelative(0, 0)          }        }        override val key: ProvidableModifierLocal<String> = shareKey2        override val value: String = widthStr      })      .then(object : LayoutModifier, ModifierLocalConsumer {        var widthStr = ""        override fun MeasureScope.measure(          measurable: Measurable, constraints: Constraints        ): MeasureResult {          val placeable = measurable.measure(constraints)          println("使用共享值:$widthStr")          return layout(placeable.width, placeable.height) {            placeable.placeRelative(0, 0)          }        }        override fun onModifierLocalsUpdated(scope: ModifierLocalReadScope) {          with(scope) {            widthStr = shareKey2.current            println("获取共享值:$widthStr")          }        }      })  )}@Composableprivate fun ModifierLocal04() {  //方式2  不能保证上游赋值操作在下游取值操作之前，所以使用对象传递  val shareKey2 = modifierLocalOf { arrayOf("0") }  Text(    text = "Hello Compose 4!", fontSize = 30.sp,    modifier = Modifier      .then(object : LayoutModifier, ModifierLocalProvider<Array<String>> {        val widthStr = arrayOf("0")        override fun MeasureScope.measure(          measurable: Measurable, constraints: Constraints        ): MeasureResult {          val placeable = measurable.measure(constraints)          widthStr[0] = placeable.width.toString()          println("设置共享值:${widthStr[0]}")          return layout(placeable.width, placeable.height) {            placeable.placeRelative(0, 0)          }        }        override val key: ProvidableModifierLocal<Array<String>> = shareKey2        override val value: Array<String> = widthStr      })      .then(object : LayoutModifier, ModifierLocalConsumer {        var widthStr = arrayOf("")        override fun MeasureScope.measure(          measurable: Measurable, constraints: Constraints        ): MeasureResult {          val placeable = measurable.measure(constraints)          println("使用共享值:${widthStr[0]}")          return layout(placeable.width, placeable.height) {            placeable.placeRelative(0, 0)          }        }        override fun onModifierLocalsUpdated(scope: ModifierLocalReadScope) {          with(scope) {            widthStr = shareKey2.current            println("获取共享值:${widthStr[0]}")          }        }      })  )}@Composableprivate fun ModifierLocal05() {  Text(    text = "Hello Compose 5!", fontSize = 30.sp,    modifier = Modifier      // 使用范例      .windowInsetsPadding(WindowInsets(16.dp, 16.dp, 16.dp, 16.dp))      .windowInsetsPadding(WindowInsets(48.dp, 48.dp, 8.dp, 8.dp))      .windowInsetsPadding(WindowInsets(72.dp, 72.dp, 2.dp, 2.dp))      .windowInsetsPadding(WindowInsets(32.dp, 32.dp, 12.dp, 12.dp))  )}