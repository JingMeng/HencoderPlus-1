package com.hsicen.a05_modifierimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.compose.runtime.Composableimport androidx.compose.ui.ExperimentalComposeUiApiimport androidx.compose.ui.Modifierimport androidx.compose.ui.layout.LayoutModifierimport androidx.compose.ui.layout.Measurableimport androidx.compose.ui.layout.MeasureResultimport androidx.compose.ui.layout.MeasureScopeimport androidx.compose.ui.modifier.ModifierLocalConsumerimport androidx.compose.ui.modifier.ModifierLocalProviderimport androidx.compose.ui.modifier.ModifierLocalReadScopeimport androidx.compose.ui.modifier.ProvidableModifierLocalimport androidx.compose.ui.modifier.modifierLocalConsumerimport androidx.compose.ui.modifier.modifierLocalOfimport androidx.compose.ui.modifier.modifierLocalProviderimport androidx.compose.ui.unit.Constraints/******====== 52. ModifierLocal 和 ModifierLocalProvider、ModifierLocalConsumer ======******//** * ModifierLocal * ModifierLocalProvider * ModifierLocalConsumer * * 作用：⽤于让数据穿透 Modifier ，实现在多个 Modifier 之间的共享。 * * 写法：[ModifierLocal01] *  1.直接⽤ Modifier.modifierLocalProvider() 和 Modifier.ModifierLocalConsumer() *  2.实现 ModifierLocalProvider 和 ModifierLocalConsumer 接⼝ */fun ComponentActivity.composeModifier14() {  setContent {    ModifierLocal01()  }}@OptIn(ExperimentalComposeUiApi::class)@Composableprivate fun ModifierLocal01() {  // 方式1  val shareKey = modifierLocalOf { "空" }  Modifier    .modifierLocalProvider(shareKey) {      "hsicen"    }    .modifierLocalConsumer {      println(shareKey.current)    }  //方式2  val shareKey2 = modifierLocalOf { "0" }  Modifier    .then(object : LayoutModifier, ModifierLocalProvider<String> {      var widthStr = ""      override fun MeasureScope.measure(        measurable: Measurable, constraints: Constraints      ): MeasureResult {        val placeable = measurable.measure(constraints)        widthStr = placeable.width.toString()        return layout(placeable.width, placeable.height) {          placeable.placeRelative(0, 0)        }      }      override val key: ProvidableModifierLocal<String> = shareKey2      override val value: String = widthStr    })    .then(object : LayoutModifier, ModifierLocalConsumer {      override fun MeasureScope.measure(        measurable: Measurable, constraints: Constraints      ): MeasureResult {        val placeable = measurable.measure(constraints)        return layout(placeable.width, placeable.height) {          placeable.placeRelative(0, 0)        }      }      override fun onModifierLocalsUpdated(scope: ModifierLocalReadScope) {        println(scope)      }    })}