package com.hsicen.a01_introduceimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.paddingimport androidx.compose.material.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport com.hsicen.a01_introduce.comm.Contributorimport com.hsicen.a01_introduce.comm.githubServiceimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Response/******====== 02.suspend 挂起函数 ======******//** * CoroutineDispatcher -> ContinuationInterceptor * */fun ComponentActivity.basics02() {  setContent {    ShowContent()    coroutineSuspend02()  }}@Composableprivate fun ShowContent() {  Text(    text = "Hello Coroutine 02!",    fontSize = 25.sp,    modifier = Modifier      .padding(16.dp)      .background(Color.Yellow)      .padding(16.dp)      .clickable {        println("@@@ click from mouse.")      }  )}private fun coroutineSuspend01() {  githubService.contributorsCall("square", "retrofit")    .enqueue(object : Callback<List<Contributor>> {      override fun onResponse(call: Call<List<Contributor>>, response: Response<List<Contributor>>) {        showContributor(response.body())      }      override fun onFailure(call: Call<List<Contributor>>, t: Throwable) {        println("@@@ onFailure=$t")      }    })}private fun coroutineSuspend02() = runCatching {  CoroutineScope(Dispatchers.Main).launch {    // suspend 后不占用线程资源    val response = githubService.contributors("square", "retrofit")    showContributor(response)  }}private fun showContributor(body: List<Contributor>?) {  body?.map { "${it.login} (${it.contributions})" }    ?.reduce { acc, s -> "$acc\n$s" }    ?.let {      println("@@@Show $it")    }}