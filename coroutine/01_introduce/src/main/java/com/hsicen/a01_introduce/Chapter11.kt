package com.hsicen.a01_introduceimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.paddingimport androidx.compose.material.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport com.hsicen.a01_introduce.comm.Contributorimport com.hsicen.a01_introduce.comm.githubServiceimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchimport kotlinx.coroutines.suspendCancellableCoroutineimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseimport kotlin.coroutines.resumeimport kotlin.coroutines.resumeWithException/******====== 11.连接线程世界：和回调型 API 协作 ======******//** * suspendCoroutine：将回调型的 api 使用协程包装成挂起函数 * suspendCancellableCoroutine：支持取消，invokeOnCancellation{} 为注册取消回调监听 */fun ComponentActivity.basics11() {  setContent {    ShowContent()    coroutineCustomSuspend01()  }}private fun coroutineCustomSuspend01() {  CoroutineScope(Dispatchers.Main.immediate).launch {    // 串行流程    val contributors1 = coroutineInCallback()    val contributors2 = coroutineInCallback()    showContribute(contributors1 + contributors2)  }}// 在回调型 API 中使用协程private suspend fun coroutineInCallback() =  suspendCancellableCoroutine {    it.invokeOnCancellation {      // 取消回调 收尾工作处理    }    githubService.contributorsCall("square", "retrofit")      .enqueue(object : Callback<List<Contributor>> {        override fun onResponse(p0: Call<List<Contributor>>, response: Response<List<Contributor>>) {          it.resume(response.body() ?: listOf())        }        override fun onFailure(p0: Call<List<Contributor>>, t: Throwable) {          it.resumeWithException(t)        }      })  }private fun showContribute(contributors: List<Contributor>) {  println("Show:$contributors")}private suspend fun getContributors(): List<Contributor> {  return githubService.contributors("square", "retrofit")    .filter { it.contributions > 10 }}@Composableprivate fun ShowContent() {  Text(    text = "Hello Coroutine 11!",    fontSize = 25.sp,    modifier = Modifier      .padding(16.dp)      .background(Color.Yellow)      .padding(16.dp)  )}