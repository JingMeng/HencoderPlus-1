package com.hsicen.a01_introduceimport android.os.Handlerimport android.os.Looperimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.paddingimport androidx.compose.material.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchimport java.util.concurrent.Executorsimport kotlin.concurrent.thread/******====== 01.切线程 launch(并行的切线程，切走了，不影响当前线程) ======******//** * CoroutineDispatcher -> ContinuationInterceptor * Dispatchers： Default, Main, IO, Unconfined *  Default：计算密集型任务(图片滤镜，高斯模糊，MD5计算，图片压缩，编解码，循环遍历，字符串拼接)，线程数量与CPU核数相关 *  IO：I/O密集型任务(文件读写，网络请求)，线程数量固定(默认64) *  Main：主线程 *  Unconfined：未指定明确运行的线程(不切线程，运行在当前线程环境中) * * Context: *  newFixedThreadPoolContext() *  newSingleThreadContext() */fun ComponentActivity.basics01() {  setContent {    ShowContent()    coroutineLaunch01()  }}@Composableprivate fun ShowContent() {  Text(    text = "Hello Coroutine 01!",    fontSize = 25.sp,    modifier = Modifier      .padding(16.dp)      .background(Color.Yellow)      .padding(16.dp)      .clickable {        println("@@@ click from mouse.")      }  )}private fun coroutineLaunch01() {  // 主线程  Handler(Looper.getMainLooper()).post {    println("@@@Main: ${Thread.currentThread().name}")  }  println("@@@Main: ${Thread.currentThread().name}")  // 线程  thread {    Thread.sleep(1000)    println("@@@Thread: ${Thread.currentThread().name}")  }  // 线程池  val executorService = Executors.newCachedThreadPool()  executorService.execute {    Thread.sleep(1000)    println("@@@Executors: ${Thread.currentThread().name}")  }  // 协程  val coroutineScope = CoroutineScope(Dispatchers.Default)  // 默认使用 Dispatchers.Default  coroutineScope.launch {    Thread.sleep(1000)    println("@@@CoroutineScope: ${Thread.currentThread().name}")  }}