package com.hsicen.a01_introduceimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.paddingimport androidx.compose.material.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport com.hsicen.a01_introduce.comm.Contributorimport com.hsicen.a01_introduce.comm.githubServiceimport io.reactivex.rxjava3.disposables.Disposableimport io.reactivex.rxjava3.schedulers.Schedulersimport kotlinx.coroutines.*/******====== 10.并行协程的启动和交互 ======******//** * 挂起函数(suspend)：串行 * * 启动协程(launch)：并行 * 启动协程(async)：并行 * * 如果依赖上一步的结果，使用 async，然后使用 await 等待结果 * 如果不依赖上一步的结果，使用 launch，然后使用 join 等待上一步执行完成 */fun ComponentActivity.basics10() {  setContent {    ShowContent()  }}private fun coroutineCustomSuspend01() {  CoroutineScope(Dispatchers.Main.immediate).launch {    // 串行流程    val contributors1 = getContributors()    val contributors2 = getContributors()    showContribute(contributors1 + contributors2)    coroutineScope {// 使用 coroutineScope 方便结构化管理      // 先并行(job1,job2)      val job1 = async { githubService.contributors("square", "retrofit") }      val job2 = async { githubService.contributors("square", "okhttp") }      // 再串行(job1.await()，job2.await())      showContribute(job1.await() + job2.await())    }    // 并行流程    launch {// 启动协程1    }    launch {// 启动协程2    }  }}private fun completableFuture() {  val future1 = githubService.contributorsFuture("square", "retrofit")  val future2 = githubService.contributorsFuture("square", "okhttp")  future1.thenCombine(future2) { contributors1, contributors2 ->    contributors1 + contributors2  }.thenAccept { mergedList ->    showContribute(mergedList)  }}private fun showContribute(contributors: List<Contributor>) {  println("Show:$contributors")}private suspend fun getContributors(): List<Contributor> {  return githubService.contributors("square", "retrofit")    .filter { it.contributions > 10 }}private fun getContributorsRx(): Disposable {  return githubService.contributorsRx("square", "retrofit")    .map { list -> list.filter { it.contributions > 10 } }    .observeOn(Schedulers.io())    .subscribe(::showContribute)}private suspend fun processData() =  withContext(Dispatchers.Default) {    println("@@@basics05 (4) " + Thread.currentThread().name)    delay(500)    "Processed: data"  }@Composableprivate fun ShowContent() {  Text(    text = "Hello Coroutine 10!",    fontSize = 25.sp,    modifier = Modifier      .padding(16.dp)      .background(Color.Yellow)      .padding(16.dp)  )}