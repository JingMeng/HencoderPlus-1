package com.hsicen.a05_cooperateimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.asContextElementimport kotlinx.coroutines.delayimport kotlinx.coroutines.launchimport kotlinx.coroutines.runBlockingimport kotlinx.coroutines.withContextimport kotlin.coroutines.EmptyCoroutineContext/******====== 68.ThreadLocal ======******//** * ThreadLocal: 线程的局部变量 *  1.变量值在每个线程里都是独立的，不会共享 */fun main(): Unit = runBlocking {    test2()    delay(5000)}private fun test1() {    val scope = CoroutineScope(EmptyCoroutineContext)    val localStr = ThreadLocal<String>()    scope.launch {        localStr.set("Hello")        delay(200)        println("localStr1= ${localStr.get()}")        launch {            delay(300)            println("localStr2= ${localStr.get()}")        }        scope.launch {            localStr.set("World")            delay(100)            println("localStr3= ${localStr.get()}")        }    }    scope.launch {        delay(1000)        println("localStr4= ${localStr.get()}")    }}private fun test2() {    val scope = CoroutineScope(EmptyCoroutineContext)    val localStr = ThreadLocal<String>()    scope.launch {        withContext(localStr.asContextElement("Hello")) {            delay(200)            println("localStr1= ${localStr.get()}")        }        launch {            delay(300)            println("localStr2= ${localStr.get()}")        }        scope.launch {            withContext(localStr.asContextElement("World")) {                delay(100)                println("localStr3= ${localStr.get()}")            }        }    }    scope.launch {        delay(1000)        println("localStr4= ${localStr.get()}")    }}