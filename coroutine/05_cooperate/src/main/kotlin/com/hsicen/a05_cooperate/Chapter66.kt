package com.hsicen.a05_cooperateimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.ExperimentalCoroutinesApiimport kotlinx.coroutines.delayimport kotlinx.coroutines.launchimport kotlinx.coroutines.runBlockingimport kotlinx.coroutines.selects.onTimeoutimport kotlinx.coroutines.selects.selectimport kotlin.coroutines.EmptyCoroutineContextimport kotlin.time.Duration.Companion.seconds/******====== 66.select<T> 先到先得 ======******//** * select: *  1. select 是一个挂起函数，可以监听 Job，Channel，Deferred 的结束，并选择最快结束回调的返回值作为自己的返回值 *      Job = onJoin 监听一个Job是否完成 *      Channel = onSend/onReceive 监听一个Channel是否完成 *      Deferred = onAwait 监听一个Deferred是否完成 * *  2. onTimeout 延迟一段时间后，如果都没有完成，则返回onTimeout中的值 */fun main(): Unit = runBlocking {    test1()    delay(5000)}@OptIn(ExperimentalCoroutinesApi::class)private fun test1() {    val scope = CoroutineScope(EmptyCoroutineContext)    val job1 = scope.launch {        delay(2000)        println("Job1 done")    }    val job2 = scope.launch {        delay(1000)        println("Job2 done")    }    scope.launch {        val result = select {            job1.onJoin {                1            }            job2.onJoin {                2            }            onTimeout(1.seconds) {                3            }        }        println("Result= $result")    }}