package com.hsicen.a05_cooperateimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.delayimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.launchInimport kotlinx.coroutines.flow.onEachimport kotlinx.coroutines.launchimport kotlinx.coroutines.runBlockingimport kotlin.coroutines.EmptyCoroutineContext/******====== 65.协程间的协作和等待 ======******//** * 1.使用 Job.join() 挂起当前协程，直到调用join的协程结束 * 2.使用 Defer.await() 挂起当前协程，直到调用await的协程结束 * 3.CountDownLatch 等待多个协程结束 */fun main(): Unit = runBlocking {    test1()    delay(5000)}private fun test1() {    val scope = CoroutineScope(EmptyCoroutineContext)    val stateFlow = MutableStateFlow(0)    scope.launch {        delay(100)        stateFlow.emit(1)        delay(100)        stateFlow.emit(2)        delay(100)        stateFlow.emit(3)        delay(100)        stateFlow.emit(4)    }    stateFlow.onEach {        println("Flow1: $it")    }.launchIn(scope)}