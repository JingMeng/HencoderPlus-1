package com.hsicen.a02_concurrencyimport kotlinx.coroutines.*import kotlin.concurrent.threadimport kotlin.coroutines.EmptyCoroutineContext/******====== 22.异常的结构化管理本质 ======******//** * 协程异常的结构化管理： *  1.对未知异常进行善后处理 UncaughtException *  2.已知异常可以直接 try-catch 处理，与线程中的处理方式一致 */fun main(): Unit = runBlocking {  test5()  delay(3000)}private fun test1() {  thread {    throw RuntimeException("program run error")  }}private fun test2() {  thread {    try {      throw RuntimeException("program run error")    } catch (e: RuntimeException) {      println("catch exception: $e")    }  }}private fun test3() {  Thread.setDefaultUncaughtExceptionHandler { t, e ->    println("catch exception3: $e")  }  thread(start = false) {    try {      throw ExceptionInInitializerError("program run error")    } catch (e: RuntimeException) {      println("catch exception1: $e")    }  }.apply {    setUncaughtExceptionHandler { _, e ->      println("catch exception2: $e")    }    start()  }}private fun test4() {  Thread.setDefaultUncaughtExceptionHandler { t, e ->    println("catch exception3: $e")  }  thread(start = false) {    try {      throw ExceptionInInitializerError("program run error")    } catch (e: RuntimeException) {      println("catch exception1: $e")    }  }.apply {    /*setUncaughtExceptionHandler { _, e ->      println("catch exception2: $e")    }*/    start()  }}// CoroutineExceptionHandler 捕获异常private fun test5() {  Thread.setDefaultUncaughtExceptionHandler { _, e ->    println("exception cause2: $e")  }  val scope = CoroutineScope(EmptyCoroutineContext)  var childJob: Job? = null  val exHandler = CoroutineExceptionHandler { context, e ->    println("exception cause1: $e")    context[Job]?.start()  }  // 在最外层的父协程中注册  val parentJob = scope.launch(exHandler) {    println("Parent start.")    childJob = launch {      throw RuntimeException("child run error")    }    delay(500)    println("Parent end")  }}