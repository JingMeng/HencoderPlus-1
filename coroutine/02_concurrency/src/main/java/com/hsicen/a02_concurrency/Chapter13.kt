package com.hsicen.a02_concurrencyimport kotlinx.coroutines.*import kotlin.concurrent.threadimport kotlin.coroutines.ContinuationInterceptor/******====== 13.[一个协程]到底指的是什么 ======******//** * CoroutineScope：启动新协程，最顶级的协程管理器 *  1.CoroutineContext，ContinuationInterceptor *  2.Job：包含和协程流程相关的功能 * * * Job或CoroutineScope看作一个协程， * launch和async的block块看作一个协程 */fun main() = runBlocking {  val scope = CoroutineScope(Dispatchers.IO)  var scopeIn: CoroutineScope? = null  val job = scope.launch(Dispatchers.Default) {    val outer = scope.coroutineContext[ContinuationInterceptor]    val inner = coroutineContext[ContinuationInterceptor]    println("out: $outer")    println("in: $inner")    scopeIn = this  }  job.join() // 等待 job 执行赋值给 scopeIn  println("job === scopeIn: ${job === scopeIn}")  // job.isActive  // job.cancel()  // job.isCancelled  // job.isCompleted  // job.join()  // job.parent  // job.children  // job.cancelChildren()  val thread = thread(start = false) {    Thread.sleep(1000)    println("Hello Coroutine 13!")  }  // 元数据  // thread.isAlive  // thread.interrupt()  // thread.stop()  // thread.join()}