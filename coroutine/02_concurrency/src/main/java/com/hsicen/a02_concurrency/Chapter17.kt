package com.hsicen.a02_concurrencyimport kotlinx.coroutines.*/******====== 17.线程的交互式取消：cancel() ======******//** * Job.cancel: *  1.isActive *  2.CancellationException */fun main(): Unit = runBlocking {  //val scope = CoroutineScope(EmptyCoroutineContext)  val job = launch(Dispatchers.Default) {    var count = 0    /*while (true) {      if (isActive.not()) {        // clean work        return@launch      }      println("当前: ${count++}")      delay(500)    }*/    while (true) {      if (isActive.not()) { // ensureActive()        // clean work        throw CancellationException()        //return@launch      }      count++      if (count % 100_000_000 == 0) {        println(count)      }      if (count % 1_000_000_000 == 0) {        break      }    }  }  delay(1000)  job.cancel()}