package com.hsicen.a02_concurrencyimport kotlinx.coroutines.*import kotlin.coroutines.EmptyCoroutineContext/******====== 23.async 对异常的处理 ======******//** * async： *  1.block 代码块的执行是并行的 *  2.await 的执行是串行的 *  3.async作为子协程，block代码块中异常会有双重影响，会导致父协程的取消 和 调用await的地方发生异常 *  4.async作为最外层的父协程，block代码块中异常，不会抛给线程世界，而是抛给调用await的地方 *  5.async的block代码块不是协程的终点，调用await的地方才是 *  6.async设置CoroutineExceptionHandler没有作用 */fun main(): Unit = runBlocking {  val scope = CoroutineScope(EmptyCoroutineContext)  val exHandler = CoroutineExceptionHandler { _, throwable ->    println("root catch error: $throwable")  }  scope.async/*(exHandler)*/ {    println("parent run.")    val deferred = async {      println("child1 run.")      delay(1000)      throw RuntimeException("run error")    }    launch {      try {        deferred.await()      } catch (e: CancellationException) { // 父协程取消异常        println("catch error1: $e")      } catch (e: RuntimeException) { // 直接传递        println("catch error2: $e")      }      println("child2 run.")    }  }  delay(3000)}