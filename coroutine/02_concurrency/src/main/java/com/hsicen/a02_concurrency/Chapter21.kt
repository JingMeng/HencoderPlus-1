package com.hsicen.a02_concurrencyimport kotlinx.coroutines.*import kotlin.concurrent.threadimport kotlin.coroutines.EmptyCoroutineContext/******====== 21.CoroutineExceptionHandler ======******//** * 协程的异常： *  1.异常捕获不能穿透协程，异常捕获不能穿透线程 *  2.CoroutineExceptionHandler 也是结构化管理的 *  3.CoroutineExceptionHandler 只有设置给最外层的父协程才会起作用 */fun main(): Unit = runBlocking {  test7()  delay(10000)}// 异常捕获不能穿透协程private fun test1() {  val scope = CoroutineScope(EmptyCoroutineContext)  var childJob: Job? = null  try {    println("Parent start.")    val parentJob = scope.launch {      throw RuntimeException("run error")    }    println("Parent end")  } catch (_: Exception) {  }}// 异常捕获不能穿透线程1private fun test2() {  val scope = CoroutineScope(EmptyCoroutineContext)  var childJob: Job? = null  try {    println("Parent start.")    thread {      throw RuntimeException("run error")    }    println("Parent end")  } catch (_: Exception) {  }}// 异常捕获不能穿透线程2private fun test3() {  val scope = CoroutineScope(EmptyCoroutineContext)  var childJob: Job? = null  println("Parent start.")  thread {    try {      throw RuntimeException("run error")    } catch (_: Exception) {    }  }  println("Parent end")}// CoroutineExceptionHandler 捕获异常1private fun test4() {  val scope = CoroutineScope(EmptyCoroutineContext)  var childJob: Job? = null  val exHandler = CoroutineExceptionHandler { _, e ->    println("exception cause: $e")  }  val parentJob = scope.launch(exHandler) {    println("Parent start.")    childJob = launch {      throw RuntimeException("child run error")    }    delay(500)    println("Parent end")  }}// CoroutineExceptionHandler 捕获异常2private fun test5() {  val scope = CoroutineScope(EmptyCoroutineContext)  var childJob: Job? = null  val exHandler = CoroutineExceptionHandler { _, e ->    println("exception cause: $e")  }  val parentJob = scope.launch(exHandler) {    println("Parent start.")    throw RuntimeException("child run error")  }}// CoroutineExceptionHandler 捕获异常3// 不是设置给最外层的父协程private fun test6() {  val scope = CoroutineScope(EmptyCoroutineContext)  var childJob: Job? = null  val exHandler = CoroutineExceptionHandler { _, e ->    println("exception cause: $e")  }  val parentJob = scope.launch {    println("Parent start.")    launch(exHandler) {      throw RuntimeException("child run error")    }  }}// CoroutineExceptionHandler 捕获异常4// 不是设置给最外层的父协程private fun test7() {  val scope = CoroutineScope(EmptyCoroutineContext)  var childJob: Job? = null  val exHandler = CoroutineExceptionHandler { _, e ->    println("exception cause: $e")  }  val parentJob = scope.launch {    println("Parent start.")    launch(exHandler) {      println("child start")      launch {        throw RuntimeException("child run error")      }      println("child end")    }    println("Parent end")  }}