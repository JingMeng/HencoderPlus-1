package com.hsicen.a03_scopeimport kotlinx.coroutines.CoroutineDispatcherimport kotlinx.coroutines.CoroutineNameimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Jobimport kotlinx.coroutines.delayimport kotlinx.coroutines.launchimport kotlinx.coroutines.runBlockingimport kotlin.coroutines.ContinuationInterceptorimport kotlin.coroutines.EmptyCoroutineContext/******====== 31.CoroutineContext的加减(plus)和get ======******//** * Plus： *  1.两个CoroutineContext相加组合成CombinedContext *  2.同类型旧的值会被新的值给替代(+号右边的值替代左边的值) *  3.ContinuationInterceptor最后合并，方便查找，提高效率 * * Get：coroutineContext[CoroutineName] *  1.companion object Name * * minusKey： *  1.删除指定的coroutineContext */fun main(): Unit = runBlocking {    test1()    delay(3000)}@OptIn(ExperimentalStdlibApi::class)private fun test1() {    val name = CoroutineName("test1")    val scope = CoroutineScope(EmptyCoroutineContext + name + Job())    // [Context + Name] + Job    // [CombinedContext + Job]    scope.launch {        println("1Name thread: ${Thread.currentThread().name}")        println("1Name coroutine: ${coroutineContext[CoroutineName]}")        println("1Name coroutine: ${coroutineContext[ContinuationInterceptor]}")        println("1Name coroutine: ${coroutineContext[CoroutineDispatcher]}")        coroutineContext.minusKey(Job)        coroutineContext.minusKey(CoroutineName)    }}