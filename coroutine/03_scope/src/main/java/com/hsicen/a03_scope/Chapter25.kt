package com.hsicen.a03_scopeimport kotlinx.coroutines.*/******====== 25.CoroutineScope与CoroutineContext ======******//** * CoroutineScope： *  1.提供当前协程的上下文信息（CoroutineContext的容器） *  2.启动子协程 *  3.手动创建的CoroutineScope并不对应任何协程(可执行代码块)，作为启动和创建新协程的时候提供上下文 * * CoroutineContext(协程的上下文信息)： *  1.Job（管理流程） *  2.ContinuationInterceptor（管理线程） *  3.CoroutineExceptionHandler（管理异常） *  4.CoroutineName（管理名字） */fun main(): Unit = runBlocking {  test1()  delay(3000)}private suspend fun test1() {  val job = SupervisorJob()  val exHandler = CoroutineExceptionHandler { _, throwable ->    println("root catch error: $throwable")  }  val scope = CoroutineScope(job)  scope.launch {    throw RuntimeException("child run error")  }  delay(100)  println("Parent isCanceled: ${job.isCancelled}")}