package com.hsicen.a03_scopeimport kotlinx.coroutines.*import kotlin.coroutines.EmptyCoroutineContext/******====== 28.coroutineScope和supervisorScope ======******//** * coroutineScope： *  1.沿用外部协程的coroutineContext,并创建一个新的job,这个job是外部协程的子job *  2.和launch功能一致，创建一个外部协程的子协程 *  3.和launch的区别在于： *    1.coroutineScope不能传递参数 *    2.coroutineScope是一个挂起函数，会等待 block 代码块执行完再执行后面的代码； *      launch是协程启动后，不会等待 block 执行完再执行后面的代码 *  4.挂起函数(suspend)是串行的，协程是并行的 * *  5.coroutineScope 是有返回值的 *  6.coroutineScope 可以catch协程异常 * * supervisorScope：内部使用 SupervisorJob，子协程抛异常不会导致父协程被取消 */fun main(): Unit = runBlocking {  test2()  supervisorScope {  }  delay(3000)}private suspend fun test1() {  val scope = CoroutineScope(EmptyCoroutineContext)  scope.launch {    coroutineScope {      delay(500)      println("coroutineScope run:${System.currentTimeMillis()}")    }    println("coroutineScope next:${System.currentTimeMillis()}")    launch {      delay(500)      println("launch run:${System.currentTimeMillis()}")    }    println("launch next:${System.currentTimeMillis()}")    delay(1500)  }}private suspend fun test2() {  val name = try {    coroutineScope {      val deferred1 = async {        "hsicen"      }      val deferred2 = async {        throw Exception("test")      }      "FullName=${deferred1.await()} ${deferred2.await()}"    }  } catch (e: Exception) {    e.message  }  println(name)}