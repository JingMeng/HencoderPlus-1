package com.hsicen.a04_channelflowimport kotlinx.coroutines.coroutineScopeimport kotlinx.coroutines.flow.Flowimport kotlinx.coroutines.flow.flowimport kotlinx.coroutines.flow.flowOfimport kotlinx.coroutines.runBlocking/******====== 44.Flow 的自定义操作符 ======******//** * Flow：operator *  使用一个 Flow 对象来创建另一个 Flow 对象 */fun main(): Unit = runBlocking {    // Flow        数据流    // SharedFlow  事件订阅(一对多，跨协程)    // StateFlow   状态订阅    test1()}private suspend fun test1() = coroutineScope {    val flow = flowOf(1, 2, 3, 4, 5, 1, 2, 3, 6, 6, 7, 8, 9, 10)    val flow2 = flowOf("Hsicen", "hsicen", "HsIcen", "hsiceni")    flow.double()        .collect {            println(it)        }    flow2.customOperator()        .collect {            println(it)        }}// 自定义操作符fun <T> Flow<T>.customOperator(): Flow<T> = flow {    // 将数据从上游传递到下游    collect {        emit(it)        emit(it)    }}fun Flow<Int>.double(): Flow<Int> = flow {    // 将数据从上游传递到下游    collect {        emit(it * it)    }}