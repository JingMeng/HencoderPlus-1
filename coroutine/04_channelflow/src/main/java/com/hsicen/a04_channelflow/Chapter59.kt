package com.hsicen.a04_channelflowimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.delayimport kotlinx.coroutines.flow.flowOfimport kotlinx.coroutines.flow.launchInimport kotlinx.coroutines.flow.mergeimport kotlinx.coroutines.flow.onEachimport kotlinx.coroutines.runBlockingimport kotlin.coroutines.EmptyCoroutineContext/******====== 59.多个Flow的合并 ======******//** * buffer系列操作符：缓冲功能（ChannelFlow底层支撑） *  1.flowOn 操作符 */fun main(): Unit = runBlocking {    // Flow        数据流    // SharedFlow  事件订阅(一对多，跨协程)    // StateFlow   状态订阅    test1()    delay(10000)}private fun test1() {    val scope = CoroutineScope(EmptyCoroutineContext)    val start = System.currentTimeMillis()    val flow1 = flowOf(1, 2, 3)    val flow2 = flowOf(4, 5, 6)    val mergeFlow = merge(flow1, flow2)    mergeFlow.onEach {        println("Flow: $it")    }.launchIn(scope)}