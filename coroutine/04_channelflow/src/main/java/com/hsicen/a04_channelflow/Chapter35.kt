package com.hsicen.a04_channelflowimport kotlinx.coroutines.ExperimentalCoroutinesApiimport kotlinx.coroutines.channels.Channelimport kotlinx.coroutines.channels.consumeEachimport kotlinx.coroutines.channels.produceimport kotlinx.coroutines.coroutineScopeimport kotlinx.coroutines.delayimport kotlinx.coroutines.isActiveimport kotlinx.coroutines.launchimport kotlinx.coroutines.runBlocking/******====== 35.Channel的工作模式详解 ======******//** * Channel：协程之间传递数据的工具 */fun main(): Unit = runBlocking {    // StateFlow  状态订阅    // ShareFlow  事件订阅    // Flow       数据流    test2()}private suspend fun test1() = coroutineScope {    suspend fun loadData(): String {        delay(2000)        return "Content load from network. ${System.currentTimeMillis() / 1000}"    }    val channel = Channel<String>()    launch {        channel.send(loadData())        channel.trySend("Content load from cache.")    }    launch {        val data = channel.receive()        println(data)    }}@OptIn(ExperimentalCoroutinesApi::class)private suspend fun test2() = coroutineScope {    suspend fun loadData(): String {        delay(2000)        return "Content load from network. ${System.currentTimeMillis() / 1000}"    }    produce {        while (isActive) {            val data = loadData()            send(data)        }    }.consumeEach {        println(it)    }}