package com.hsicen.a04_channelflowimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.delayimport kotlinx.coroutines.flow.filterimport kotlinx.coroutines.flow.flowOfimport kotlinx.coroutines.flow.onEachimport kotlinx.coroutines.launchimport kotlinx.coroutines.runBlockingimport kotlin.coroutines.EmptyCoroutineContext/******====== 51.Flow 的 onEach 操作符 ======******/fun main(): Unit = runBlocking {    // Flow        数据流    // SharedFlow  事件订阅(一对多，跨协程)    // StateFlow   状态订阅    test1()    delay(10000)}private fun test1() {    val scope = CoroutineScope(EmptyCoroutineContext)    val flow1 = flowOf(1, 2, 3, 4, 5)    // onEach    // 不改变原数据，返回一个新的 Flow 对象    // 可以做一个数据监听的作用，可以调用多次    scope.launch {        flow1.onEach {            println("onEach1: $it")        }.filter {            it % 2 == 0        }.onEach {            println("onEach2: $it")        }.collect {            println("flow1: $it")        }    }}