package com.hsicen.a04_channelflowimport kotlinx.coroutines.coroutineScopeimport kotlinx.coroutines.delayimport kotlinx.coroutines.flow.flowimport kotlinx.coroutines.runBlocking/******====== 38.Flow 的功能定位 ======******//** * Flow：协程版的 Sequence，支持挂起函数的数据流 */fun main(): Unit = runBlocking {    // Flow        数据流    // SharedFlow  事件订阅(一对多，跨协程)    // StateFlow   状态订阅    test2()}private suspend fun test1() = coroutineScope {    suspend fun loadData(): String {        delay(2000)        return "Content load from network. ${System.currentTimeMillis() / 1000}"    }    // 惰性集合 不支持协程    val nums = sequence {        yield("1")//yield(loadData())        yield("2")//yield(loadData())        yield("3")//yield(loadData())        yield("4")//yield(loadData())    }    nums.forEach {        println("Sequence: $it")    }    // 一次性添加    val nums2 = buildList {        add(loadData())        add(loadData())        add(loadData())        add(loadData())    }    nums2.forEach {        println("List: $it")    }}private suspend fun test2() = coroutineScope {    suspend fun loadData(): String {        delay(2000)        return "Content load from network. ${System.currentTimeMillis() / 1000}"    }    // 惰性集合(支持协程)    val nums = flow {        emit(loadData())        emit(loadData())        emit(loadData())        emit(loadData())    }    nums.collect {        println("Flow: $it")    }}