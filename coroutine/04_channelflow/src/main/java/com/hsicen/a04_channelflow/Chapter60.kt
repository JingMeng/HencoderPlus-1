package com.hsicen.a04_channelflowimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.channels.consumeEachimport kotlinx.coroutines.delayimport kotlinx.coroutines.flow.countimport kotlinx.coroutines.flow.firstimport kotlinx.coroutines.flow.firstOrNullimport kotlinx.coroutines.flow.flowOfimport kotlinx.coroutines.flow.produceInimport kotlinx.coroutines.flow.singleimport kotlinx.coroutines.flow.toCollectionimport kotlinx.coroutines.flow.toListimport kotlinx.coroutines.flow.toSetimport kotlinx.coroutines.launchimport kotlinx.coroutines.runBlockingimport kotlin.coroutines.EmptyCoroutineContext/******====== 60.将Flow对象转换成其它类型 ======******//** * Flow的转换： *  1.Terminal operator：first，firstOrNull，last，lastOrNull，single，singleOrNull，count， *  2.Collection operator：toList，toSet，toCollection *  3.Channel operator：produceIn */fun main(): Unit = runBlocking {    // Flow        数据流    // SharedFlow  事件订阅(一对多，跨协程)    // StateFlow   状态订阅    test3()    delay(5000)}private fun test1() {    val scope = CoroutineScope(EmptyCoroutineContext)    val flow1 = flowOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)    scope.launch {        println("Flow.first = ${flow1.first()}")        println("Flow.first with condition = ${flow1.first { it > 5 }}")        println("Flow.first with condition = ${flow1.firstOrNull { it > 15 }}")        flow1.single()        flow1.count()    }}private fun test2() {    val scope = CoroutineScope(EmptyCoroutineContext)    val flow1 = flowOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)    scope.launch {        println("TOList1: ${flow1.toList()}")        println("TOList2: ${flow1.toList(mutableListOf(0))}")        flow1.toSet()        flow1.toCollection(mutableListOf(0))    }}private fun test3() {    val scope = CoroutineScope(EmptyCoroutineContext)    val flow1 = flowOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)    val channel = flow1.produceIn(scope)    scope.launch {        channel.consumeEach {            println("Channel: $it")        }    }}