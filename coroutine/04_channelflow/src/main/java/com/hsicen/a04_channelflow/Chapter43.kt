package com.hsicen.a04_channelflowimport kotlinx.coroutines.coroutineScopeimport kotlinx.coroutines.flow.distinctUntilChangedimport kotlinx.coroutines.flow.distinctUntilChangedByimport kotlinx.coroutines.flow.flowOfimport kotlinx.coroutines.flow.launchInimport kotlinx.coroutines.flow.onCompletionimport kotlinx.coroutines.flow.onEachimport kotlinx.coroutines.flow.onStartimport kotlinx.coroutines.runBlocking/******====== 43.Flow 的 distinctUntilChanged 操作符 ======******//** * Flow：operator */fun main(): Unit = runBlocking {    // Flow        数据流    // SharedFlow  事件订阅(一对多，跨协程)    // StateFlow   状态订阅    test1()}private suspend fun test1() = coroutineScope {    val flow = flowOf(1, 2, 3, 4, 5, 1, 2, 3, 6, 6, 7, 8, 9, 10)    val flow2 = flowOf("Hsicen", "hsicen", "HsIcen", "hsiceni")    flow.onEach {        print("$it ")    }.onStart {        println("原始数据流：")    }.onCompletion {        println()    }.launchIn(this)    // 连续数据重复，只保留一个 使用的 ==/equals 判断是否相等    flow.distinctUntilChanged()        .onEach {            print("$it ")        }.onStart {            println("distinctUntilChanged1：")        }.onCompletion {            println()        }.launchIn(this)    flow2.distinctUntilChanged { old, new ->        old.lowercase() == new.lowercase()    }.onEach {        print("$it ")    }.onStart {        println("distinctUntilChanged2：")    }.onCompletion {        println()    }.launchIn(this)    flow2.distinctUntilChangedBy {        it.lowercase() // 先转换为小写，再判断是否相等，不会修改原数据    }.onEach {        print("$it ")    }.onStart {        println("distinctUntilChangedBy：")    }.onCompletion {        println()    }.launchIn(this)}