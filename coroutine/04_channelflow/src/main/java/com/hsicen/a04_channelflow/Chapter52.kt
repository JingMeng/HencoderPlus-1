package com.hsicen.a04_channelflowimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.delayimport kotlinx.coroutines.flow.Flowimport kotlinx.coroutines.flow.flowimport kotlinx.coroutines.flow.flowOfimport kotlinx.coroutines.launchimport kotlinx.coroutines.runBlockingimport kotlin.coroutines.EmptyCoroutineContext/******====== 52.Flow 的 chunked 操作符 ======******/fun main(): Unit = runBlocking {    // Flow        数据流    // SharedFlow  事件订阅(一对多，跨协程)    // StateFlow   状态订阅    test1()    delay(10000)}private fun test1() {    val scope = CoroutineScope(EmptyCoroutineContext)    val flow1 = flowOf(1, 2, 3, 4, 5)    // chunked    // 将数据切块，每块的大小为指定的大小    scope.launch {        flow1.chunked(3)            .collect {                println("flow1: $it")            }    }}fun <T> Flow<T>.chunked(size: Int): Flow<List<T>> = flow {    require(size > 0) { "Chunk size should be greater than 0" }    val buffer = mutableListOf<T>()    collect { value ->        buffer.add(value)        if (buffer.size == size) {            emit(buffer.toList())            buffer.clear()        }    }    if (buffer.isNotEmpty()) {        emit(buffer.toList())    }}