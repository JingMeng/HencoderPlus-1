package com.hsicen.a04_channelflowimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.delayimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.launchInimport kotlinx.coroutines.flow.onEachimport kotlinx.coroutines.launchimport kotlinx.coroutines.runBlockingimport kotlin.coroutines.EmptyCoroutineContext/******====== 64.StateFlow/MutableStateFlow(状态订阅) ======******//** * StateFlow：只保存最新一条数据的事件流 *   1.缓冲和缓存大小都是1的SharedFlow *   2.stateIn 将已有的Flow转换成StateFlow *   3.asStateFlow 将已有的Flow转换成StateFlow(只读) */fun main(): Unit = runBlocking {    // 功能逐步收窄    // Flow        数据流    // SharedFlow  事件订阅(一对多，跨协程)    // StateFlow   状态订阅    test1()    delay(5000)}private fun test1() {    val scope = CoroutineScope(EmptyCoroutineContext)    val stateFlow = MutableStateFlow(0)    scope.launch {        delay(100)        stateFlow.emit(1)        delay(100)        stateFlow.emit(2)        delay(100)        stateFlow.emit(3)        delay(100)        stateFlow.emit(4)    }    stateFlow.onEach {        println("Flow1: $it")    }.launchIn(scope)}