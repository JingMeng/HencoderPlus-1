package com.hsicen.a04_channelflowimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.delayimport kotlinx.coroutines.flow.MutableSharedFlowimport kotlinx.coroutines.flow.launchInimport kotlinx.coroutines.flow.onEachimport kotlinx.coroutines.launchimport kotlinx.coroutines.runBlockingimport kotlin.coroutines.EmptyCoroutineContext/******====== 63.MutableShareFlow ======******//** * MutableShareFlow： *   1.适用于需要在外部发送数据/事件的需求 * *   2.参数 *      （1）replay：缓存大小 *      （2）extraBufferCapacity：缓冲大小 *      （3）onBufferOverflow：缓冲溢出策略(与缓存无关) * *   3.asSharedFlow：转换成SharedFlow，提供给外部订阅(只读) * * 与shareIn的区别： *  1.对于已有的Flow数据流，使用shareIn即可 *  2.对于新创建的Flow数据流，使用MutableSharedFlow */fun main(): Unit = runBlocking {    // Flow        数据流    // SharedFlow  事件订阅(一对多，跨协程)    // StateFlow   状态订阅    test1()    delay(5000)}private fun test1() {    val scope = CoroutineScope(EmptyCoroutineContext)    val sharedFlow = MutableSharedFlow<Int>()    scope.launch {        delay(100)        sharedFlow.emit(1)        delay(100)        sharedFlow.emit(2)        delay(100)        sharedFlow.emit(3)        delay(100)        sharedFlow.emit(4)    }    sharedFlow.onEach {        println("Flow1: $it")    }.launchIn(scope)}